# -*- coding: utf-8 -*-
"""Copy of 04_Python While Loops Learner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_9Rf6Mta6zRz_-jV6wjsH5WuQ0SMtitH
"""

i = 1
while i <= 4:
      print(i)
      i += 1

"""* * *

Python Loops
------------

Python has two primitive loop commands:

*   **while loops**
*   **for loops**

* * *

The while Loop
--------------

With the while loop we can execute a set of statements as long as a condition is true.

**Note:** remember to increment i, or else the loop will continue forever.

The while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1.

**Example**

Print i as long as i is less than 6:

```
i = 1
while i < 6:
  print(i)
  i += 1
```

Explanation of the above code:

```
i = 1

# Create a variable called i and assign it the value of 1
# A variable is like a box that can store some data, such as a number, a word, or a list of things.
# You can give a variable any name you want, as long as it follows some rules, such as starting with a letter and not using spaces or symbols.
# The = sign means that you are putting the value on the right side into the box on the left side.
# In this case, we are creating a box named i and putting the number 1 inside it.
# We are using i as a counter or an iterator, which means that we will use it to keep track of how many times we loop.
# We are starting with 1 because we want to count from 1 to 5, but you can start with any number you want.

while i < 6:

# Start a loop that will repeat as long as i is less than 6
# A loop is a way to repeat some actions over and over again, without having to write the same code many times.
# The word while means that we are going to keep looping as long as the condition after it is true.
# A condition is a question that can be answered with yes or no, such as is i less than 6?
# The < sign means that we are comparing the values on both sides, and it returns yes if the left side is smaller than the right side, and no otherwise.
# The : sign means that we are ending the condition and starting the block of statements that we want to loop.
# A block of statements is a group of instructions that are indented under the same level, using spaces or tabs.
# The indentation tells the computer which statements belong to the loop and which ones do not.

 print(i)

  # Print the value of i on the screen
  # The word print is a function, which is a special kind of instruction that can do something for us.
  # A function has a name, followed by parentheses, and sometimes has some arguments inside the parentheses.
  # An argument is a piece of data that we give to the function to use.
  # In this case, the argument is i, which means that we are giving the value of i to the print function to show us.

   i += 1

  # Add 1 to the value of i and assign the result back to i
  # The += sign is a shortcut way of saying that we are taking the value of i, adding 1 to it, and then putting the result back into the box named i.
  # So, for example, if i was 1, then i += 1 would make i 2.
  # This is how we are making i increase by 1 every time we loop.

# End the loop and the program
# When the condition becomes false, such as when i is 6 or more, the loop stops and the program moves on to the next statement.
# In this case, there is no next statement, so the program ends.
```

**Try it ourself below:**
* * *


"""

nessa = 0
while nessa < 6:
  print(nessa)
  nessa += 1

nessa = -6
while nessa < 6:
  print(nessa)
  nessa += 1

#what if i give an increemnt of 2
nessa = 10
while nessa < 6:
  print(nessa)
  nessa += 2

# what if the starting point is already greater than 6?
nessa = 15
while nessa > 6:
  print(nessa)
  if nessa == 8:
    break
  nessa -= 1

# what of the condition in while statement is never satisfied? LOOP OF DEATH
nessa = 7
while nessa > 6:
  print(nessa)
  nessa += 1

nessa = 7
while nessa < 6:
  print(nessa)
  nessa += 1

"""The break Statement
-------------------

With the break statement we can stop the loop even if the while condition is true:

### Example

Exit the loop when i is 3:
```
i = 1  
while i < 6:  
  print(i)  
  if i == 3:  
    break  
  i += 1
```

* * *
**Step by step Explanation**
```
# Create a variable called i and assign it the value of 1
i = 1
# Start a loop that will repeat as long as i is less than 6
while i < 6:
  # Print the value of i on the screen
  print(i)
  # Check if i is equal to 3
  if i == 3:
    # If yes, stop the loop and exit
    break
  # If no, add 1 to the value of i and continue the loop
  i += 1
  ```
* * *
[Try it Yourself below »](https://www.w3schools.com/python/trypython.asp?filename=demo_while_break)


"""

i = 1
while i < 6:
  print(i)
  if i == 3:
    break
  i += 1

"""The continue Statement
----------------------

With the continue statement we can stop the current iteration, and continue with the next:

### Example

Continue to the next iteration if i is 3:
```
i = 0  
while i < 6:  
  i += 1  
  if i == 3:  
    continue  
  print(i)  
```


* * *
**Explanation of the code**

```
# Create a variable called i and assign it the value of 0
i = 0
# Start a loop that will repeat as long as i is less than 6
while i < 6:
  # Add 1 to the value of i and assign the result back to i
  i += 1
  # Check if i is equal to 3
  if i == 3:
    # If yes, skip the rest of the loop and go back to the start
    continue
  # If no, print the value of i on the screen
  print(i)
```

Notice how 3 is missing from the result

***
[Try it Yourself below »](https://www.w3schools.com/python/trypython.asp?filename=demo_while_continue)
"""

i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)

"""The else Statement: Optional
------------------

With the else statement we can run a block of code once when the condition no longer is true:

### Example

Print a message once the condition is false:
```
i = 1  
while i < 6:  
  print(i)  
  i += 1  
else:  
  print("i is no longer less than 6")  
```

[Try it Yourself »](https://www.w3schools.com/python/trypython.asp?filename=demo_while_else)

* * *
"""

i = 1
while i < 6:
  print(i)
  i += 1
else:
  print("i is no longer less than 6")

#example of a nested while loop
i = 1
while i < 6:
  j = "A"
  while j < "E":
    print(i, j)
    j = chr(ord(j) + 1)
  i += 1

#example of a nested while loop when J < "K"
i = 1
while i < 4:
  j = "A"
  while j < "K":
    print(i, j)
    j = chr(ord(j) + 1)
  i += 1

"""#Exercises for practice"""

#creating a countdown timer using while loop.
#we shall need to import the time repository

import time
#creating a countdown using while from 10
countdown = 10
while countdown >= 0:
  print(countdown)
  time.sleep(1) #allowing it to wait for 1 second
  countdown -= 1  # since its a countdown therefore add a decrement instead of an increment
print("Blastoff!")

import time

# Prompt user for input and convert to integer
ins = int(input("Enter a number "))
i = 0

# Loop until i equals ins
while i != ins:
    print(i, 'seconds')
    time.sleep(1)  # Wait for 1 second
    i += 1  # Increment i by 1

# Print final value to match entered number
print(i, 'seconds')

# doing the same thing but in local time
import time

# Prompt user for input and convert to integer
ins = int(input("Enter a number"))
i = 0
# Loop until i equals ins
while i != ins:
    # Get the current local time in UK date style
    current_time = time.strftime("%d-%m-%Y %H:%M:%S", time.localtime())

    # Print the current countdown value and local time
    print(f"{i} seconds (Current local time: {current_time})")

    # Wait for 1 second
    time.sleep(1)

    # Increment i by 1
    i += 1

# Print final value to match entered number
print(f"{i} seconds (Current local time: {time.strftime('%d-%m-%Y %H:%M:%S', time.localtime())})")

# countdown in local time
import time

# Prompt user for input and convert to integer
ins = int(input("Enter a number "))

# Loop until ins equals 0 (greater than 0)
while ins > 0:
    # Get the current local time in UK date style
    current_time = time.strftime("%d-%m-%Y %H:%M:%S", time.localtime())

    # Print the current countdown value and local time
    print(f"{ins} seconds (Current local time: {current_time})")

    # Wait for 1 second
    time.sleep(1)

    # Decrement ins by 1
    ins -= 1

# Print final value to match entered number
print(f"{ins} seconds (Current local time: {time.strftime('%d-%m-%Y %H:%M:%S', time.localtime())})")

"""# Activity: Time for you to Practice

## **While**

A while loop will run code while the condition used in a while statement is true. An
input statement, often used in a while loop, will capture a user’s input information and
make it a variable. It is important to make sure the while loop will end at some point as
failing to do so will cause an endless loop and eventually crash your program.
As is the case with an if statement, the while condition must end with a colon and the
loop (the actions) to take place must be indented under the while condition.

**Purpose:**

Upon completing this project, you will be able to create a while loop that will allow a
user to guess an answer until the answer is right.

**Follow the instructions below:**

 1. Go to the code block below. There should be a line of code written for you.
 2. Under the variables, create a while statement with a condition that the `capitalGuess`variable **does**  not equal Riga.
 3. For the loop, add the following:
    	 - a. Add 1 to the numberOfGuesses variable.
    	 - b. Set the capitalGuess variable to be an input with the message Guess again and a space.
 4. Under the while loop, add a print statement with this text: **You guessed it. Riga is the capital of Latvia.**
 5. Add another print statement with the message **It took you plus the number of guesses plus guesses.**
 6. Run the code.
 7. Type **Vilnius** and press the Enter key.
 8. Type **Riga** and press the Enter key. You should see the following display:
  - What is the capital of Latvia? Vilnius
	- Guess again.  Riga
	- You guessed it. Riga is the capital of Latvia.
	- It took you 2 guesses.

9. Close the output window

## Write your answer below
"""

capitalGuess = input("What is the capital of Latvia? ")
numberOfGuesses = 1

while capitalGuess != "Riga":
    numberOfGuesses +=1
    capitalGuess = input("Guess again ")
print("You guessed it. Riga is the capital of Latvia.")
time.sleep(1)
print(f"It took you {numberOfGuesses} guesses.")

#add while and print statements here